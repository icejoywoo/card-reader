//////////////////////////////////////////////////////////////////////////
// FileName: Handlers.cpp
// Creator: icejoywoo
// Date: 2011.12.05
// Comment: 服务器的线程实现
//////////////////////////////////////////////////////////////////////////
#include "Handlers.h"
#include "ServerParam.h"
#include "ServerUtils.h"
#include <vector>
#include <algorithm>

using namespace std;

// GUI上控制日志显示的线程
UINT logHandler (LPVOID pParam)
{
	while (TRUE)
	{
		if (!Server::getInstance()->log.IsEmpty())
		{
			CEdit* logWindow = (CEdit*) pParam;
			int len = logWindow->GetWindowTextLength();
			logWindow->SetSel(len,len);
			logWindow->ReplaceSel(Server::getInstance()->log);

			Server::getInstance()->log = "";
			Server::getInstance()->log.Empty(); 
			Server::getInstance()->log.ReleaseBuffer();// 清空日志

			if (logWindow->GetLineCount() > 1000) // 超过1000行清空一次
			{
				logWindow->SetWindowText("");
			}
		}
		Sleep(500); // 延迟0.5s
	}
	return 0;
}

//////////////////////////////////////////////////////////////////////////
/// 默认的handlers定义 
//////////////////////////////////////////////////////////////////////////

// TODO: 修改handler
UINT defaultServerHandler(LPVOID pParam)
{
	Server* serv = (Server*) pParam;
	
	if ((serv->server = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET)
	{
		SimpleLog::error("服务器创建Socket失败");
		return -1;
	}
	
	// TODO: 初始化读卡器(用udp测试的时候使用, 到生产环境的时候应该删除)
	if (InitUDPComm() == -1) {
		AfxMessageBox("与卡片读写器的通信初始化失败");
		SimpleLog::error("与卡片读写器的通信初始化失败");
		return INIT_FAILED; // 与卡片读写器的通信初始化失败
	}

	struct sockaddr_in local;
	memset(&local, 0, sizeof(local));
	local.sin_family = AF_INET;
	local.sin_addr.s_addr = INADDR_ANY;
	local.sin_port = htons(serv->getPort());
	
	if (bind(serv->server, (struct sockaddr*)&local, sizeof(local)) != 0)
	{
		SimpleLog::error("服务器绑定端口失败");
		return -2;
	}
	
	if (listen(serv->server, 64) != 0)
	{
		SimpleLog::error("服务器监听端口失败");
		return -3;
	}
	
	// 对读卡器的访问控制, 在服务器启动的时候进行初始化设置
	for (set<int>::iterator iter = ServerParam::instance->readerIdSet.begin(); 
			iter != ServerParam::instance->readerIdSet.end(); ++iter) // 遍历当前读卡器id的集合
	{
		serv->readerUsage[*iter] = 0; // 初始化控制列表, 都未使用
	}

	SOCKET clientSocket;
	struct sockaddr_in from;
	memset(&from, 0, sizeof(from));
	int fromlen = sizeof(from);
//	SimpleLog::info(CString("服务器启动成功, ") + "IP:" + inet_ntoa(local.sin_addr) + ", 端口: " + i2str(serv->getPort()));
	SimpleLog::info(CString("服务器启动成功, ") + "端口: " + i2str(serv->getPort()));

	AfxBeginThread(serv->waitListHandler, NULL); // 启动等待队列线程, 处理等待队列的
	AfxBeginThread(serv->timeoutListHandler, NULL); // 启动延时处理线程, 手动调试的时候可以关闭

	while (true)
	{
		clientSocket = accept(serv->server, (struct sockaddr*) &from, &fromlen);
		if (clientSocket == INVALID_SOCKET) // 接受客户端socket失败, 是在关闭服务器的时候
		{
			SimpleLog::warn(CString("接收客户端请求失败, 来自") + inet_ntoa(from.sin_addr));
			break;
		}
		SimpleLog::info(CString("接收到一个客户端请求, 来自") + inet_ntoa(from.sin_addr));
		

		// 接收客户端的请求, 首先读取读卡器id
		int readerId; // 读卡器号
		receiveData(clientSocket, readerId);
		if (ServerParam::instance->readerIdSet.count(readerId) > 0 )
		{
			SimpleLog::info(CString("接收读卡器com号: [") + i2str(readerId) + "]");			
			sendData(clientSocket, "id_ok");
		} else {
			SimpleLog::error(CString("接收读卡器com号: [") + i2str(readerId) + "], 读卡器不存在");			
			sendData(clientSocket, "id_wrong");
			closesocket(clientSocket);
			continue;
		}
		

		// 读取延时
		int timeout; // 读卡器延时
		receiveData(clientSocket, timeout);
		
		SimpleLog::info(CString("[读卡器 ") + i2str(readerId) + "]的延时为: " + i2str(timeout));
		sendData(clientSocket, "timeout_ok");
		Client* client = new Client(clientSocket); // new一个client
		client->setReaderId(readerId);
		client->setTimeout(timeout);
		Server::getInstance()->addToWaitList(client);
		SimpleLog::info(CString("将请求添加到[读卡器 ") + i2str(readerId) + "]等待队列中...");
	}
	return 0;
}

UINT defaultWaitListHandler (LPVOID pParam ) 
{
	while (Server::getInstance()->status == TRUE)
	{
		// 进入临界区, 寻找是否有读卡器处在等待状态
		EnterCriticalSection(&(Server::getInstance()->g_cs));
		for (map<int,int>::iterator iter = Server::getInstance()->readerUsage.begin();
			iter != Server::getInstance()->readerUsage.end(); ++iter) // 寻找未使用的读卡器
		{
			if (0 == iter->second && !Server::getInstance()->waitList[iter->first].empty())
			{
				SimpleLog::info(CString("开始处理[读卡器 ") + i2str(iter->first) + "]的请求...");
				Server::getInstance()->getClientByReaderId(iter->first)->updateTimeout();
				AfxBeginThread(Server::getInstance()->clientHandler, (LPVOID)iter->first);
				Server::getInstance()->readerUsage[iter->first] = 1; // 标记读卡器为正在使用
			}
		}
		LeaveCriticalSection(&(Server::getInstance()->g_cs));
		Sleep(100); // 休眠100ms, 根据情况适当修改
	}

	return 0;
}

UINT defaultTimeoutListHandler (LPVOID pParam )
{
	while (Server::getInstance()->status == TRUE) // 读卡器的延时队列只针对当前访问读卡器的客户端
	{
		EnterCriticalSection(&(Server::getInstance()->g_cs));
		// 遍历所有客户端
		for (map<Client*, int>::iterator iter = Server::getInstance()->clients.begin();
			iter != Server::getInstance()->clients.end() ; ++iter)
		{
			if (iter->first->isOvertime()) // 客户端如果超时, 就直接关闭其socket
			{
				iter->first->release();
// 				Server::getInstance()->waitList[iter->second].remove((iter->first)); // 删除等待列表中的超时的客户端
 				SimpleLog::info(CString("[读卡器 ") + i2str(iter->second) + "]的客户端" + i2str(iter->first->getSocket()) + "超时, 从等待队列中删除");
				break;
			}
		}
		
		LeaveCriticalSection(&(Server::getInstance()->g_cs));
		Sleep(100); // 休眠100ms, 根据情况适当修改
	}
	
	return 0;
}

// TODO: 修改handler, 读取读卡器的数据
UINT defaultClientHandler (LPVOID pParam)
{
	int readerId = ((int) pParam);
	Client* client = Server::getInstance()->getClientByReaderId(readerId); // 取出相应读卡器队列中的socket

	char buff[512]; // buffer

	client->sendData("Ready"); // 告诉客户端已经准备就绪可以操作
	client->updateTimeout();

	CString operationName;
	int resultCode;
	while(operationName != "quit")
	{
		
		// 接收客户端的请求
		if (client->receiveData(buff, 512) == -1) // 接收数据错误即刻关闭
		{
			break;
		}
		client->updateTimeout();
		if ((resultCode= parseCommand(client, readerId, buff, operationName)) >= 0)
		{
			if (Server::getInstance()->status == TRUE)
				SimpleLog::info(CString("[读卡器 ") + i2str(readerId) + "][" + operationName + "]操作成功");
		} else {
			SimpleLog::error(CString("[读卡器 ") + i2str(readerId) + "][" + operationName + "]操作失败, 错误码: " + i2str(resultCode));
		}
		client->updateTimeout();
		// 将结果发送到客户端
		if (client->sendData(resultCode) == -1) // 发送数据出错即刻关闭
		{
			break;
		}
	}
	// 释放读卡器
	Server::getInstance()->releaseReader(readerId);
	client->release();
//	delete client; // 不要的指针删掉

	// 将读卡器设置为可用
	EnterCriticalSection(&(Server::getInstance()->g_cs));
	Server::getInstance()->readerUsage[readerId] = 0;  // 操作完成后, 设置为空闲状态
	LeaveCriticalSection(&(Server::getInstance()->g_cs));

	return 0;
}
